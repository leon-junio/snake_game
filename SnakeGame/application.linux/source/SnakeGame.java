/* autogenerated by Processing revision 1277 on 2023-08-30 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Random;
import java.util.List;
import java.util.ArrayList;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SnakeGame extends PApplet {

/**
 * Snake Game
 * @author Leon-Junio
 */



public static final short[] BG_COLOR = {50, 256, 50};
private static Snake snake;
public static final short W = 600, H = 400;
public static final byte SNAKE_SIZE_W = 10, SNAKE_SIZE_H = 10, BORDER = 20, GRID_SIZE = 10, VELOCITY = 10;
public static byte MOVE_INTERVAL = 100;
private static int score;
private static SnakeMove lastMove = null;
public static boolean isRunning;
private static long currentTime = 0l, lastMoveTime;
private static short[] bodyPos;
private static short FOOD_X, FOOD_Y;
private static short[] FOOD_COLOR;
private static Random random;
private static PFont FONT_SCORE, FONT_GAME;

/**
 * Setup configuration of the game
 *
 */
 public void setup() {
  /* size commented out by preprocessor */;
  score = 0;
  isRunning = true;
  lastMoveTime = System.currentTimeMillis();
  frameRate(60);
  FONT_SCORE = createFont("Impact", 18);
  FONT_GAME =  createFont("Impact", 32);
  snake = new Snake();
  snake.startSnake(new short[]{W/2, H/2});
  random = new Random();
  newFood();
}

/**
 * Draw the game frame by frame (gameplay loop function - 60fps)
 */
 public void draw() {
  try {
    background(BG_COLOR[0], BG_COLOR[1], BG_COLOR[2]);
    drawBorders();
    drawScore();
    if (!isRunning) {
      drawGameOver();
      return;
    }
    drawFood();
    drawSnake();
    currentTime = System.currentTimeMillis();
    if (currentTime - lastMoveTime >= MOVE_INTERVAL) {
      snake.updateMovement();
      lastMoveTime = currentTime;
    }
  }
  catch(Exception e) {
    e.printStackTrace();
  }
}

/** RENDERS **/

/**
 * Draw the game over screen
 */
 public void drawGameOver() {
  fill(255, 255, 255);
  textFont(FONT_GAME);
  text("Game Over", (W/2)-65, H/2);
  text("Press 'R' to restart", (W/2)-120, (H/2)+40);
}

/**
 * Draw the snake body and head in the screen
 */
 public void drawSnake() {
  bodyPos = snake.getPosition(0);
  stroke(0, 30, 255);
  fill(150, 60, 200);
  rect(bodyPos[0], bodyPos[1], SNAKE_SIZE_W, SNAKE_SIZE_H);
  for (int index = 1; index < snake.getSize(); index++) {
    bodyPos = snake.getPosition(index);
    stroke(0, 30, 255);
    fill(50, 100, 200);
    rect(bodyPos[0], bodyPos[1], SNAKE_SIZE_W, SNAKE_SIZE_H);
  }
}

/**
 * Draw the score in the screen (bottom center)
 */
 public void drawScore() {
  fill(255, 255, 255);
  textFont(FONT_SCORE);
  text("Leon Snake Game: "+ score, (W/2) - 70, H - 3);
}

/**
 * Draw the borders of the game (4 rects - top, left, right, bottom)
 */
 public void drawBorders() {
  fill(20, 100, 255);
  noStroke();
  rect(0, 0, W, BORDER);
  rect(0, 0, BORDER, H);
  rect(W-BORDER, 0, BORDER, H);
  rect(0, H-BORDER, W, BORDER);
}

/**
 * Draw the food in the screen (random position and color)
 * if food is null, spawn a new food
 */
 public void drawFood() {
  stroke(255, 255, 255);
  fill(FOOD_COLOR[0], FOOD_COLOR[1], FOOD_COLOR[2]);
  rect(FOOD_X, FOOD_Y, GRID_SIZE, GRID_SIZE);
}

/** GAME LOGIC **/

/**
 * Run the game over logic (remove food, destroy snake and stop game)
 */
public static void gameOver() {
  isRunning = false;
  snake.destroySnake();
  System.gc(); //free some memory
}

/**
 * Restart the game (reset snake, food, score and move interval)
 */
 public void restartGame() {
  snake.startSnake(new short[]{W/2, H/2});
  lastMove = null;
  isRunning = true;
  MOVE_INTERVAL = 100;
  score = 0;
  newFood();
}

/**
 * Update the score (add 1 to score)
 */
public static void updateScore() {
  score++;
}

/**
 * Spawn a new food in the screen (random position and color)
 * For each spawn increase the snake speed (decrease the move interval)
 */
public static void newFood() {
  FOOD_X = (short) random.ints(0 + GRID_SIZE + BORDER, W - GRID_SIZE - BORDER).findFirst().getAsInt();
  FOOD_Y = (short) random.ints(0 + GRID_SIZE + BORDER, H - GRID_SIZE - BORDER).findFirst().getAsInt();
  FOOD_COLOR = new short[]{(short)random.nextInt(255), (short)random.nextInt(255), (short)random.nextInt(255)};
  if (MOVE_INTERVAL > 50)
    MOVE_INTERVAL -= 1;
}

/**
 * Capture the key typed and update the snake movement
 * If the game is not running, capture the 'r' key to restart the game
 */
 public void keyTyped() {
  if (isRunning) {
    switch(key) {
    case 'w':
      if (lastMove == SnakeMove.DOWN) break;
      lastMove = SnakeMove.UP;
      snake.updatePosition(lastMove);
      break;
    case 'a':
      if (lastMove == SnakeMove.RIGHT) break;
      lastMove = SnakeMove.LEFT;
      snake.updatePosition(lastMove);
      break;
    case 's':
      if (lastMove == SnakeMove.UP) break;
      lastMove = SnakeMove.DOWN;
      snake.updatePosition(lastMove);
      break;
    case 'd':
      if (lastMove == SnakeMove.LEFT) break;
      lastMove = SnakeMove.RIGHT;
      snake.updatePosition(lastMove);
      break;
    }
  } else {
    if (key == 'r') {
      restartGame();
    }
  }
}

/**
 * Snake Game
 * @author Leon-Junio
 *
 **/




public class Snake {

  private static final byte FOOD_COLISION_TOLERANCE = 10, BODY_COLISION_TOLERANCE = 1;
  private short[] bodyX, bodyY;
  private short arrIndex;
  private SnakeMove[] movements;

  public Snake() {
    init();
  }

  private void init() {
    arrIndex = 0;
    var pieces = piecesPerScreen();
    bodyX = new short[pieces];
    bodyY = new short[pieces];
    movements = new SnakeMove[pieces];
  }

  public int piecesPerScreen() {
    return (SnakeGame.W * SnakeGame.H) / (SnakeGame.SNAKE_SIZE_W * SnakeGame.SNAKE_SIZE_H);
  }

  /**
   * Get the snake body at the specified index
   * @param index the index of the snake body
   * @return SnakeBody the snake body at the specified index
   */
  public short[] getPosition(int index) {
    return new short[]{bodyX[index], bodyY[index]};
  }

  /**
   * Update position of snakeHead
   * @param movement SnakeMove that user typed
   * @return SnakeBody the snake body at the specified index
   */
  public void updatePosition(SnakeMove movement) {
    movements[0] = movement;
  }

  /**
   * Gets the first position of the snake.
   * @return Position The first position of the snake.
   */
  public short[] getFirstPosition() {
    return new short[]{bodyX[0], bodyY[0]};
  }

  /**
   * Destroys the snake by clearing its body and positions.
   */
  public void destroySnake() {
    init();
  }

  /**
   * Adds a new body to the snake.
   * The new body is created based on the last body's position and movement.
   * The new body is positioned one movement offset away from the last body.
   */
  public void newBody() {
    short[] lastPosition = {bodyX[arrIndex], bodyY[arrIndex]};
    var movement = movements[arrIndex];
    var offset = movement.getOffset();
    arrIndex++;
    bodyX[arrIndex] = (short)(lastPosition[0] + offset[0]);
    bodyY[arrIndex] = (short)(lastPosition[1] + offset[1]);
    movements[arrIndex] = movement;
  }

  public short getSize() {
    return (short) (arrIndex + 1);
  }


  /**
   * Updates the movement of the snake and checks for collisions with food, borders and body.
   * If the snake collides with food, a new food is created and the score is updated.
   * If the snake collides with borders or body, the game is over.
   */
  public void updateMovement() {
    if (getSize() > 1) {
      for (int index = arrIndex; index > 0; index--) {
        bodyX[index] = bodyX[index - 1];
        bodyY[index] = bodyY[index - 1];
        movements[index] = movements[index-1];
      }
    }
    updateHeadPosition();
    if (checkCollisionWithFood()) {
      SnakeGame.newFood();
      newBody();
      SnakeGame.updateScore();
    }
    if (checkCollisionWithBorders() || checkCollisionWithBody()) {
      SnakeGame.gameOver();
    }
  }

  /**
   * Starts the snake at the specified position.
   * @param position The position to start the snake.
   */
  public void startSnake(short[] position) {
    bodyX[0] = position[0];
    bodyY[0] = position[1];
    movements[0] = SnakeMove.UP;
  }

  /**
   * Updates the position of all snake pieces of body.
   */
  private void updateHeadPosition() {
    doMovement(movements[0], SnakeGame.VELOCITY);
  }


  /**
   * Checks if the snake's head collides with its body.
   * @return true if there is a collision, false otherwise.
   */
  private boolean checkCollisionWithBody() {
    var result = false;
    for (int index = 1; index < getSize(); index++) {
      short[] body = {bodyX[index], bodyY[index]};
      if (Math.abs(body[0] - bodyX[0]) <= BODY_COLISION_TOLERANCE &&
        Math.abs(body[1] - bodyY[0]) <= BODY_COLISION_TOLERANCE) {
        result = true;
        break;
      }
    }
    return result;
  }

  /**
   * Checks if the snake collides with the food.
   * @return true if the snake collides with the food, false otherwise.
   */
  private boolean checkCollisionWithFood() {
    return (Math.abs(SnakeGame.FOOD_X - bodyX[0]) <= FOOD_COLISION_TOLERANCE &&
      Math.abs(SnakeGame.FOOD_Y - bodyY[0]) <= FOOD_COLISION_TOLERANCE);
  }

  /**
   * Checks if the snake has collided with the game borders.
   * @return true if the snake has collided with the borders, false otherwise.
   */
  private boolean checkCollisionWithBorders() {
    return  (bodyX[0] < SnakeGame.BORDER || bodyX[0] > SnakeGame.W - SnakeGame.BORDER - SnakeGame.SNAKE_SIZE_W ||
      bodyY[0] < SnakeGame.BORDER || bodyY[0] > SnakeGame.H - SnakeGame.BORDER - SnakeGame.SNAKE_SIZE_H);
  }

  /**
   * Do a movement in the snake body with a velocity value
   * @param velocity short value of velocity
   */
  public void doMovement(SnakeMove movement, short velocity) {
    switch(movement) {
    case UP:
      bodyY[0] -= velocity;
      break;
    case DOWN:
      bodyY[0] += velocity;
      break;
    case LEFT:
      bodyX[0] -= velocity;
      break;
    case RIGHT:
      bodyX[0] += velocity;
      break;
    }
  }
}

/**
 * Snake Game
 * @author Leon-Junio
 */

/**
 * Enum to represent the snake moves
 **/
public enum SnakeMove {
  /**
   * Offset to apply to the body piece when the snake moves
   **/
  UP,
    DOWN,
    LEFT,
    RIGHT;

  private final byte OFFSET = 10;

  /**
   * Get the offset to apply to the body piece when the snake moves
   * @return byte[] - Offset to apply to the body piece when the snake moves
   **/
  public byte[] getOffset() {
    byte[] result = {};
    switch(this) {
    case UP:
      result = new byte[]{0, +OFFSET};
      break;
    case DOWN:
      result = new byte[]{0, -OFFSET};
      break;
    case LEFT:
      result = new byte[]{+OFFSET, 0};
      break;
    case RIGHT:
      result = new byte[]{-OFFSET, 0};
      break;
    }
    return result;
  }
}


  public void settings() { size(600, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SnakeGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
